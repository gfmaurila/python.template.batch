
# docker-compose down
# docker-compose up -d --build
# docker-compose down -v 
# docker-compose up --build

version: "3.9"

services:

  python_template_api:
    build: .
    container_name: python_template_api
    ports:
      - "8002:8002"
    volumes:
      - .:/app
    depends_on:
      - sqlserver
      - redis
      - mongoserver
      - rabbitmq
      - kafka1
      - oracle
      - oracle-db
    networks:
      - app-backend

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python_worker
    command: python src/worker/main.py
    volumes:
      - .:/app
    depends_on:
      - sqlserver
      - redis
      - mongoserver
      - rabbitmq
      - kafka1
      - oracle
      - oracle-db
    networks:
      - app-backend  

  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    cap_add: [ 'SYS_PTRACE' ]
    hostname: mssql
    container_name: sqlserver
    restart: always
    expose:
      - 1433
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@Poc2Minimal@Api
      - MSSQL_PID=Developer
      - MSSQL_TCP_PORT=1433
    networks:
      - app-backend
    volumes:
      - sql_data:/var/opt/mssql

  # -----------------------------------------------------------------------
  # https://hub.docker.com/r/oracleinanutshell/oracle-xe-11g

  # docker run -d -p 49161:1521 -p 8080:8080 oracleinanutshell/oracle-xe-11g

  # Login http://localhost:8080/apex/apex_admin with following credential:
  # username: ADMIN
  # password: admin
  # password: !G18u03i1986

  # DBEaver
  # hostname: localhost
  # port: 49161
  # sid: xe
  # username: system
  # password: oracle

  # .NET Core 
  # Install-Package Oracle.ManagedDataAccess.Core
  # using Oracle.ManagedDataAccess.Client;
  # "DefaultConnection": "User Id=system;Password=oracle;Data Source=//localhost:1521/xe;"

  oracle:
    image: oracleinanutshell/oracle-xe-11g:latest
    container_name: oracle
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
      - ORACLE_USER=system
      - ORACLE_PASSWORD=oracle
      - ORACLE_DATABASE=xe
    restart: always
    networks:
      - app-backend

  oracle-db:
    image: oracleinanutshell/oracle-xe-11g
    container_name: oracle_db
    ports:
      - "49161:1521"
      - "8080:8080"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
    restart: always
    networks:
      - app-backend

  # BEGIN MKT -------------------------------------------------------------- 
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: Poc2Minimal@Api
      MYSQL_USER: admin
      MYSQL_PASSWORD: Poc2Minimal@Api
      MYSQL_DATABASE: Teste
    restart: always
    expose:
      - 3306
    ports:
      - "3306:3306"
    networks:
      - app-backend

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-backend
    volumes:
      - redis_data:/var/opt/redis

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-backend
    volumes:
      - mongoserver_data:/var/opt/mongoserver

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - app-backend

  zookeeper:
    image: bitnami/zookeeper:3.8
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-backend

  kafka1:
    image: bitnami/kafka:3.6
    restart: always
    volumes:
      - kafka_data1:/bitnami
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - app-backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - 9100:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka1
    networks:
      - app-backend

networks:
  app-backend:

volumes:
  sql_data:
  redis_data:
  mongoserver_data:
  zookeeper_data:
  kafka_data1:
